meta {
  name: create
  type: http
  seq: 3
}

post {
  url: https://api.escuelajs.co/api/v1/users/
  body: json
  auth: none
}

body:json {
  {
    "name": "Jonatan",
    "email": "jona@gmail.com",
    "password": "12345",
      "avatar": "https://api.lorem.space/image/face?w=640&h=480"
  }
}

script:post-response {
   let response = res.getBody();
      bru.setEnvVar("userId", response.id);
}

tests {
  test("CP01|Validar que el método del request sea POST", () => {
    const data = req.getMethod();
    expect(data).to.equal('POST');
  })
  
  test("CP02|Validar que el status de la respuesta sea 201", () => {
    const data = res.getStatus();
    expect(data).to.equal(201);
  })
  
  test("CP03|Validar que el tiempo de respuesta sea menor a 2 segundos", () => {
    const responseTime = res.getResponseTime();
    expect(responseTime).to.be.lessThan(2000);
  })
  
  test("CP04|Validar que existan todas las propiedades principales de la respuesta", () => {
    const response = res.getBody();
    expect(response).to.be.an('object');
    expect(response).to.include.keys([
      'id',
      'name',
      'email',
      'password',
      'avatar',
      'creationAt',
      'updatedAt'
    ]);
  })
  
  test("CP05|Validar que las propiedades principales tengan los tipos de datos esperados", () => {
    const response = res.getBody();
    expect(response.id).to.be.a('number');
    expect(response.name).to.be.a('string');
    expect(response.email).to.be.a('string');
    expect(response.password).to.be.a('string');
    expect(response.avatar).to.be.a('string');
    expect(response.creationAt).to.be.a('string');
    expect(response.updatedAt).to.be.a('string');
  })
  
  test("CP06|Validar que el body del request contenga las propiedades necesarias", () => {
    const requestBody = req.getBody();
    expect(requestBody).to.include.keys([
      'name',
      'email',
      'password',
      'avatar'
    ]);
    expect(requestBody.name).to.be.a('string');
    expect(requestBody.email).to.be.a('string');
    expect(requestBody.password).to.be.a('string');
    expect(requestBody.avatar).to.be.a('string');
  })
  
    test("CP07|Validar que el email tenga un formato correcto", () => {
    const requestBody = req.getBody();
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    expect(requestBody.email).to.match(emailRegex);
  })
  
  test("CP08|Validar que la contraseña tenga un mínimo de 4 caracteres", () => {
    const requestBody = req.getBody();
    expect(requestBody.password.length).to.be.at.least(4);
  })
}

meta {
  name: update
  type: http
  seq: 3
}

put {
  url: https://api.escuelajs.co/api/v1/users/34
  body: json
  auth: none
}

body:json {
  {
    "name": "Nicolas"
  }
}

tests {
  test("CP01|Validar que el mÃ©todo del request sea PUT", () => {
    const data = req.getMethod();
    expect(data).to.equal('PUT');
  })
  
  test("CP02|Validar que el status de la respuesta sea 200", () => {
    const data = res.getStatus();
    expect(data).to.equal(200);
  })
  
  test("CP03|Validar que el tiempo de respuesta sea menor a 2 segundos", () => {
    const responseTime = res.getResponseTime();
    expect(responseTime).to.be.lessThan(2000);
  })
  
  test("CP04|Validar que existan todas las propiedades principales de la respuesta", () => {
    const response = res.getBody();
    expect(response).to.be.an('object');
    expect(response).to.include.keys([
      'id',
      'name',
      'email',
      'password',
      'avatar',
      'creationAt',
      'updatedAt'
    ]);
  })
  
  test("CP05|Validar que las propiedades principales tengan los tipos de datos esperados", () => {
    const response = res.getBody();
    expect(response.id).to.be.a('number');
    expect(response.name).to.be.a('string');
    expect(response.email).to.be.a('string');
    expect(response.password).to.be.a('string');
    expect(response.avatar).to.be.a('string');
    expect(response.creationAt).to.be.a('string');
    expect(response.updatedAt).to.be.a('string');
  })
  
  test("CP06|Validar que el body del request contenga las propiedades necesarias", () => {
    const requestBody = req.getBody();
    expect(requestBody).to.include.keys([
      'name'
    ]);
    expect(requestBody.name).to.be.a('string');
  })
}
